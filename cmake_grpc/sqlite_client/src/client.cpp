#include <iostream>#include <memory>#include <string>#include <grpcpp/grpcpp.h>#include <stdlib.h>#include <string.h>#include "../pb/os_rpc.grpc.pb.h"using grpc::Channel;using grpc::ClientContext;using grpc::Status;using osrpc::InitRequest;using osrpc::InitReply;using osrpc::OSRPC;std::unique_ptr<OSRPC::Stub> stub_ = OSRPC::NewStub(        grpc::CreateChannel("127.0.0.1:50051", grpc::InsecureChannelCredentials()));const char *RPCInit() {    InitRequest request;    InitReply reply;    ClientContext context;    Status status = stub_->RPCInit(&context, request, &reply);    // Act upon its status.    if (status.ok()) {        return reply.rc().data();    } else {        std::cout << status.error_code() << ": " << status.error_message() << std::endl;        return "RPC failed";    }}extern "C" const char *ClientRPCInit() {    return RPCInit();}/*#include <iostream>#include <stdlib.h>extern "C" char *ClientRPCInit() {    int rc = 10;    char* p = (char*)&rc;    return p;}*/
