// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: os_rpc.proto

#include "os_rpc.pb.h"
#include "os_rpc.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace osrpc {

static const char* OSRPC_method_names[] = {
  "/osrpc.OSRPC/RPCInit",
  "/osrpc.OSRPC/RPCOpen",
};

std::unique_ptr< OSRPC::Stub> OSRPC::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< OSRPC::Stub> stub(new OSRPC::Stub(channel));
  return stub;
}

OSRPC::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_RPCInit_(OSRPC_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RPCOpen_(OSRPC_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status OSRPC::Stub::RPCInit(::grpc::ClientContext* context, const ::osrpc::InitRequest& request, ::osrpc::InitReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RPCInit_, context, request, response);
}

void OSRPC::Stub::experimental_async::RPCInit(::grpc::ClientContext* context, const ::osrpc::InitRequest* request, ::osrpc::InitReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RPCInit_, context, request, response, std::move(f));
}

void OSRPC::Stub::experimental_async::RPCInit(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::osrpc::InitReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RPCInit_, context, request, response, std::move(f));
}

void OSRPC::Stub::experimental_async::RPCInit(::grpc::ClientContext* context, const ::osrpc::InitRequest* request, ::osrpc::InitReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RPCInit_, context, request, response, reactor);
}

void OSRPC::Stub::experimental_async::RPCInit(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::osrpc::InitReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RPCInit_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osrpc::InitReply>* OSRPC::Stub::AsyncRPCInitRaw(::grpc::ClientContext* context, const ::osrpc::InitRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::osrpc::InitReply>::Create(channel_.get(), cq, rpcmethod_RPCInit_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::osrpc::InitReply>* OSRPC::Stub::PrepareAsyncRPCInitRaw(::grpc::ClientContext* context, const ::osrpc::InitRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::osrpc::InitReply>::Create(channel_.get(), cq, rpcmethod_RPCInit_, context, request, false);
}

::grpc::Status OSRPC::Stub::RPCOpen(::grpc::ClientContext* context, const ::osrpc::OpenRequest& request, ::osrpc::OpenReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RPCOpen_, context, request, response);
}

void OSRPC::Stub::experimental_async::RPCOpen(::grpc::ClientContext* context, const ::osrpc::OpenRequest* request, ::osrpc::OpenReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RPCOpen_, context, request, response, std::move(f));
}

void OSRPC::Stub::experimental_async::RPCOpen(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::osrpc::OpenReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RPCOpen_, context, request, response, std::move(f));
}

void OSRPC::Stub::experimental_async::RPCOpen(::grpc::ClientContext* context, const ::osrpc::OpenRequest* request, ::osrpc::OpenReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RPCOpen_, context, request, response, reactor);
}

void OSRPC::Stub::experimental_async::RPCOpen(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::osrpc::OpenReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RPCOpen_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::osrpc::OpenReply>* OSRPC::Stub::AsyncRPCOpenRaw(::grpc::ClientContext* context, const ::osrpc::OpenRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::osrpc::OpenReply>::Create(channel_.get(), cq, rpcmethod_RPCOpen_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::osrpc::OpenReply>* OSRPC::Stub::PrepareAsyncRPCOpenRaw(::grpc::ClientContext* context, const ::osrpc::OpenRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::osrpc::OpenReply>::Create(channel_.get(), cq, rpcmethod_RPCOpen_, context, request, false);
}

OSRPC::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OSRPC_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OSRPC::Service, ::osrpc::InitRequest, ::osrpc::InitReply>(
          std::mem_fn(&OSRPC::Service::RPCInit), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OSRPC_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OSRPC::Service, ::osrpc::OpenRequest, ::osrpc::OpenReply>(
          std::mem_fn(&OSRPC::Service::RPCOpen), this)));
}

OSRPC::Service::~Service() {
}

::grpc::Status OSRPC::Service::RPCInit(::grpc::ServerContext* context, const ::osrpc::InitRequest* request, ::osrpc::InitReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OSRPC::Service::RPCOpen(::grpc::ServerContext* context, const ::osrpc::OpenRequest* request, ::osrpc::OpenReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace osrpc

