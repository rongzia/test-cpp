// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: test.proto
#ifndef GRPC_test_2eproto__INCLUDED
#define GRPC_test_2eproto__INCLUDED

#include "test.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class CompletionQueue;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc

namespace test {

class Test final {
 public:
  static constexpr char const* service_full_name() {
    return "test.Test";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status SetStringLength(::grpc::ClientContext* context, const ::test::LengthRequest& request, ::test::LengthReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::test::LengthReply>> AsyncSetStringLength(::grpc::ClientContext* context, const ::test::LengthRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::test::LengthReply>>(AsyncSetStringLengthRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::test::LengthReply>> PrepareAsyncSetStringLength(::grpc::ClientContext* context, const ::test::LengthRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::test::LengthReply>>(PrepareAsyncSetStringLengthRaw(context, request, cq));
    }
    virtual ::grpc::Status Seek(::grpc::ClientContext* context, const ::test::SeekRequest& request, ::test::SeekReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::test::SeekReply>> AsyncSeek(::grpc::ClientContext* context, const ::test::SeekRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::test::SeekReply>>(AsyncSeekRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::test::SeekReply>> PrepareAsyncSeek(::grpc::ClientContext* context, const ::test::SeekRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::test::SeekReply>>(PrepareAsyncSeekRaw(context, request, cq));
    }
    virtual ::grpc::Status Write(::grpc::ClientContext* context, const ::test::WriteRequest& request, ::test::WriteReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::test::WriteReply>> AsyncWrite(::grpc::ClientContext* context, const ::test::WriteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::test::WriteReply>>(AsyncWriteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::test::WriteReply>> PrepareAsyncWrite(::grpc::ClientContext* context, const ::test::WriteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::test::WriteReply>>(PrepareAsyncWriteRaw(context, request, cq));
    }
    virtual ::grpc::Status Read(::grpc::ClientContext* context, const ::test::ReadRequest& request, ::test::ReadReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::test::ReadReply>> AsyncRead(::grpc::ClientContext* context, const ::test::ReadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::test::ReadReply>>(AsyncReadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::test::ReadReply>> PrepareAsyncRead(::grpc::ClientContext* context, const ::test::ReadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::test::ReadReply>>(PrepareAsyncReadRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void SetStringLength(::grpc::ClientContext* context, const ::test::LengthRequest* request, ::test::LengthReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetStringLength(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::test::LengthReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetStringLength(::grpc::ClientContext* context, const ::test::LengthRequest* request, ::test::LengthReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SetStringLength(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::test::LengthReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Seek(::grpc::ClientContext* context, const ::test::SeekRequest* request, ::test::SeekReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Seek(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::test::SeekReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Seek(::grpc::ClientContext* context, const ::test::SeekRequest* request, ::test::SeekReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Seek(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::test::SeekReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Write(::grpc::ClientContext* context, const ::test::WriteRequest* request, ::test::WriteReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Write(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::test::WriteReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Write(::grpc::ClientContext* context, const ::test::WriteRequest* request, ::test::WriteReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Write(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::test::WriteReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Read(::grpc::ClientContext* context, const ::test::ReadRequest* request, ::test::ReadReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Read(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::test::ReadReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Read(::grpc::ClientContext* context, const ::test::ReadRequest* request, ::test::ReadReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Read(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::test::ReadReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::test::LengthReply>* AsyncSetStringLengthRaw(::grpc::ClientContext* context, const ::test::LengthRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::test::LengthReply>* PrepareAsyncSetStringLengthRaw(::grpc::ClientContext* context, const ::test::LengthRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::test::SeekReply>* AsyncSeekRaw(::grpc::ClientContext* context, const ::test::SeekRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::test::SeekReply>* PrepareAsyncSeekRaw(::grpc::ClientContext* context, const ::test::SeekRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::test::WriteReply>* AsyncWriteRaw(::grpc::ClientContext* context, const ::test::WriteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::test::WriteReply>* PrepareAsyncWriteRaw(::grpc::ClientContext* context, const ::test::WriteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::test::ReadReply>* AsyncReadRaw(::grpc::ClientContext* context, const ::test::ReadRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::test::ReadReply>* PrepareAsyncReadRaw(::grpc::ClientContext* context, const ::test::ReadRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status SetStringLength(::grpc::ClientContext* context, const ::test::LengthRequest& request, ::test::LengthReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::test::LengthReply>> AsyncSetStringLength(::grpc::ClientContext* context, const ::test::LengthRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::test::LengthReply>>(AsyncSetStringLengthRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::test::LengthReply>> PrepareAsyncSetStringLength(::grpc::ClientContext* context, const ::test::LengthRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::test::LengthReply>>(PrepareAsyncSetStringLengthRaw(context, request, cq));
    }
    ::grpc::Status Seek(::grpc::ClientContext* context, const ::test::SeekRequest& request, ::test::SeekReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::test::SeekReply>> AsyncSeek(::grpc::ClientContext* context, const ::test::SeekRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::test::SeekReply>>(AsyncSeekRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::test::SeekReply>> PrepareAsyncSeek(::grpc::ClientContext* context, const ::test::SeekRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::test::SeekReply>>(PrepareAsyncSeekRaw(context, request, cq));
    }
    ::grpc::Status Write(::grpc::ClientContext* context, const ::test::WriteRequest& request, ::test::WriteReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::test::WriteReply>> AsyncWrite(::grpc::ClientContext* context, const ::test::WriteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::test::WriteReply>>(AsyncWriteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::test::WriteReply>> PrepareAsyncWrite(::grpc::ClientContext* context, const ::test::WriteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::test::WriteReply>>(PrepareAsyncWriteRaw(context, request, cq));
    }
    ::grpc::Status Read(::grpc::ClientContext* context, const ::test::ReadRequest& request, ::test::ReadReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::test::ReadReply>> AsyncRead(::grpc::ClientContext* context, const ::test::ReadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::test::ReadReply>>(AsyncReadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::test::ReadReply>> PrepareAsyncRead(::grpc::ClientContext* context, const ::test::ReadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::test::ReadReply>>(PrepareAsyncReadRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void SetStringLength(::grpc::ClientContext* context, const ::test::LengthRequest* request, ::test::LengthReply* response, std::function<void(::grpc::Status)>) override;
      void SetStringLength(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::test::LengthReply* response, std::function<void(::grpc::Status)>) override;
      void SetStringLength(::grpc::ClientContext* context, const ::test::LengthRequest* request, ::test::LengthReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SetStringLength(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::test::LengthReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Seek(::grpc::ClientContext* context, const ::test::SeekRequest* request, ::test::SeekReply* response, std::function<void(::grpc::Status)>) override;
      void Seek(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::test::SeekReply* response, std::function<void(::grpc::Status)>) override;
      void Seek(::grpc::ClientContext* context, const ::test::SeekRequest* request, ::test::SeekReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Seek(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::test::SeekReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Write(::grpc::ClientContext* context, const ::test::WriteRequest* request, ::test::WriteReply* response, std::function<void(::grpc::Status)>) override;
      void Write(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::test::WriteReply* response, std::function<void(::grpc::Status)>) override;
      void Write(::grpc::ClientContext* context, const ::test::WriteRequest* request, ::test::WriteReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Write(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::test::WriteReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Read(::grpc::ClientContext* context, const ::test::ReadRequest* request, ::test::ReadReply* response, std::function<void(::grpc::Status)>) override;
      void Read(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::test::ReadReply* response, std::function<void(::grpc::Status)>) override;
      void Read(::grpc::ClientContext* context, const ::test::ReadRequest* request, ::test::ReadReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Read(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::test::ReadReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::test::LengthReply>* AsyncSetStringLengthRaw(::grpc::ClientContext* context, const ::test::LengthRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::test::LengthReply>* PrepareAsyncSetStringLengthRaw(::grpc::ClientContext* context, const ::test::LengthRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::test::SeekReply>* AsyncSeekRaw(::grpc::ClientContext* context, const ::test::SeekRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::test::SeekReply>* PrepareAsyncSeekRaw(::grpc::ClientContext* context, const ::test::SeekRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::test::WriteReply>* AsyncWriteRaw(::grpc::ClientContext* context, const ::test::WriteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::test::WriteReply>* PrepareAsyncWriteRaw(::grpc::ClientContext* context, const ::test::WriteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::test::ReadReply>* AsyncReadRaw(::grpc::ClientContext* context, const ::test::ReadRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::test::ReadReply>* PrepareAsyncReadRaw(::grpc::ClientContext* context, const ::test::ReadRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SetStringLength_;
    const ::grpc::internal::RpcMethod rpcmethod_Seek_;
    const ::grpc::internal::RpcMethod rpcmethod_Write_;
    const ::grpc::internal::RpcMethod rpcmethod_Read_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status SetStringLength(::grpc::ServerContext* context, const ::test::LengthRequest* request, ::test::LengthReply* response);
    virtual ::grpc::Status Seek(::grpc::ServerContext* context, const ::test::SeekRequest* request, ::test::SeekReply* response);
    virtual ::grpc::Status Write(::grpc::ServerContext* context, const ::test::WriteRequest* request, ::test::WriteReply* response);
    virtual ::grpc::Status Read(::grpc::ServerContext* context, const ::test::ReadRequest* request, ::test::ReadReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SetStringLength : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SetStringLength() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SetStringLength() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetStringLength(::grpc::ServerContext* context, const ::test::LengthRequest* request, ::test::LengthReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetStringLength(::grpc::ServerContext* context, ::test::LengthRequest* request, ::grpc::ServerAsyncResponseWriter< ::test::LengthReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Seek : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Seek() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Seek() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Seek(::grpc::ServerContext* context, const ::test::SeekRequest* request, ::test::SeekReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSeek(::grpc::ServerContext* context, ::test::SeekRequest* request, ::grpc::ServerAsyncResponseWriter< ::test::SeekReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Write() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Write(::grpc::ServerContext* context, const ::test::WriteRequest* request, ::test::WriteReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWrite(::grpc::ServerContext* context, ::test::WriteRequest* request, ::grpc::ServerAsyncResponseWriter< ::test::WriteReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Read() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Read(::grpc::ServerContext* context, const ::test::ReadRequest* request, ::test::ReadReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRead(::grpc::ServerContext* context, ::test::ReadRequest* request, ::grpc::ServerAsyncResponseWriter< ::test::ReadReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SetStringLength<WithAsyncMethod_Seek<WithAsyncMethod_Write<WithAsyncMethod_Read<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetStringLength : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_SetStringLength() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::test::LengthRequest, ::test::LengthReply>(
          [this](::grpc::ServerContext* context,
                 const ::test::LengthRequest* request,
                 ::test::LengthReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SetStringLength(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_SetStringLength(
        ::grpc::experimental::MessageAllocator< ::test::LengthRequest, ::test::LengthReply>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::test::LengthRequest, ::test::LengthReply>*>(
          ::grpc::Service::experimental().GetHandler(0))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetStringLength() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetStringLength(::grpc::ServerContext* context, const ::test::LengthRequest* request, ::test::LengthReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SetStringLength(::grpc::ServerContext* context, const ::test::LengthRequest* request, ::test::LengthReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Seek : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Seek() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::test::SeekRequest, ::test::SeekReply>(
          [this](::grpc::ServerContext* context,
                 const ::test::SeekRequest* request,
                 ::test::SeekReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Seek(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_Seek(
        ::grpc::experimental::MessageAllocator< ::test::SeekRequest, ::test::SeekReply>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::test::SeekRequest, ::test::SeekReply>*>(
          ::grpc::Service::experimental().GetHandler(1))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Seek() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Seek(::grpc::ServerContext* context, const ::test::SeekRequest* request, ::test::SeekReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Seek(::grpc::ServerContext* context, const ::test::SeekRequest* request, ::test::SeekReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Write() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::test::WriteRequest, ::test::WriteReply>(
          [this](::grpc::ServerContext* context,
                 const ::test::WriteRequest* request,
                 ::test::WriteReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Write(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_Write(
        ::grpc::experimental::MessageAllocator< ::test::WriteRequest, ::test::WriteReply>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::test::WriteRequest, ::test::WriteReply>*>(
          ::grpc::Service::experimental().GetHandler(2))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Write(::grpc::ServerContext* context, const ::test::WriteRequest* request, ::test::WriteReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Write(::grpc::ServerContext* context, const ::test::WriteRequest* request, ::test::WriteReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Read() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::test::ReadRequest, ::test::ReadReply>(
          [this](::grpc::ServerContext* context,
                 const ::test::ReadRequest* request,
                 ::test::ReadReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Read(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_Read(
        ::grpc::experimental::MessageAllocator< ::test::ReadRequest, ::test::ReadReply>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::test::ReadRequest, ::test::ReadReply>*>(
          ::grpc::Service::experimental().GetHandler(3))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Read(::grpc::ServerContext* context, const ::test::ReadRequest* request, ::test::ReadReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Read(::grpc::ServerContext* context, const ::test::ReadRequest* request, ::test::ReadReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_SetStringLength<ExperimentalWithCallbackMethod_Seek<ExperimentalWithCallbackMethod_Write<ExperimentalWithCallbackMethod_Read<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SetStringLength : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SetStringLength() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SetStringLength() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetStringLength(::grpc::ServerContext* context, const ::test::LengthRequest* request, ::test::LengthReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Seek : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Seek() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Seek() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Seek(::grpc::ServerContext* context, const ::test::SeekRequest* request, ::test::SeekReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Write() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Write(::grpc::ServerContext* context, const ::test::WriteRequest* request, ::test::WriteReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Read() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Read(::grpc::ServerContext* context, const ::test::ReadRequest* request, ::test::ReadReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetStringLength : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SetStringLength() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SetStringLength() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetStringLength(::grpc::ServerContext* context, const ::test::LengthRequest* request, ::test::LengthReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetStringLength(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Seek : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Seek() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Seek() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Seek(::grpc::ServerContext* context, const ::test::SeekRequest* request, ::test::SeekReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSeek(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Write() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Write(::grpc::ServerContext* context, const ::test::WriteRequest* request, ::test::WriteReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWrite(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Read() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Read(::grpc::ServerContext* context, const ::test::ReadRequest* request, ::test::ReadReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRead(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetStringLength : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_SetStringLength() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SetStringLength(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SetStringLength() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetStringLength(::grpc::ServerContext* context, const ::test::LengthRequest* request, ::test::LengthReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SetStringLength(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Seek : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Seek() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Seek(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Seek() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Seek(::grpc::ServerContext* context, const ::test::SeekRequest* request, ::test::SeekReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Seek(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Write() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Write(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Write(::grpc::ServerContext* context, const ::test::WriteRequest* request, ::test::WriteReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Write(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Read() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Read(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Read(::grpc::ServerContext* context, const ::test::ReadRequest* request, ::test::ReadReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Read(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetStringLength : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SetStringLength() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::test::LengthRequest, ::test::LengthReply>(std::bind(&WithStreamedUnaryMethod_SetStringLength<BaseClass>::StreamedSetStringLength, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetStringLength() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetStringLength(::grpc::ServerContext* context, const ::test::LengthRequest* request, ::test::LengthReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetStringLength(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::test::LengthRequest,::test::LengthReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Seek : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Seek() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::test::SeekRequest, ::test::SeekReply>(std::bind(&WithStreamedUnaryMethod_Seek<BaseClass>::StreamedSeek, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Seek() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Seek(::grpc::ServerContext* context, const ::test::SeekRequest* request, ::test::SeekReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSeek(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::test::SeekRequest,::test::SeekReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Write() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::test::WriteRequest, ::test::WriteReply>(std::bind(&WithStreamedUnaryMethod_Write<BaseClass>::StreamedWrite, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Write(::grpc::ServerContext* context, const ::test::WriteRequest* request, ::test::WriteReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedWrite(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::test::WriteRequest,::test::WriteReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Read() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::test::ReadRequest, ::test::ReadReply>(std::bind(&WithStreamedUnaryMethod_Read<BaseClass>::StreamedRead, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Read(::grpc::ServerContext* context, const ::test::ReadRequest* request, ::test::ReadReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRead(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::test::ReadRequest,::test::ReadReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SetStringLength<WithStreamedUnaryMethod_Seek<WithStreamedUnaryMethod_Write<WithStreamedUnaryMethod_Read<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SetStringLength<WithStreamedUnaryMethod_Seek<WithStreamedUnaryMethod_Write<WithStreamedUnaryMethod_Read<Service > > > > StreamedService;
};

}  // namespace test


#endif  // GRPC_test_2eproto__INCLUDED
