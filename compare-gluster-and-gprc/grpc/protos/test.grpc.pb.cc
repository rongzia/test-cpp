// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: test.proto

#include "test.pb.h"
#include "test.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace test {

static const char* Test_method_names[] = {
  "/test.Test/SetStringLength",
  "/test.Test/Seek",
  "/test.Test/Write",
  "/test.Test/Read",
};

std::unique_ptr< Test::Stub> Test::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Test::Stub> stub(new Test::Stub(channel));
  return stub;
}

Test::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_SetStringLength_(Test_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Seek_(Test_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Write_(Test_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Read_(Test_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Test::Stub::SetStringLength(::grpc::ClientContext* context, const ::test::LengthRequest& request, ::test::LengthReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetStringLength_, context, request, response);
}

void Test::Stub::experimental_async::SetStringLength(::grpc::ClientContext* context, const ::test::LengthRequest* request, ::test::LengthReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetStringLength_, context, request, response, std::move(f));
}

void Test::Stub::experimental_async::SetStringLength(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::test::LengthReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetStringLength_, context, request, response, std::move(f));
}

void Test::Stub::experimental_async::SetStringLength(::grpc::ClientContext* context, const ::test::LengthRequest* request, ::test::LengthReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetStringLength_, context, request, response, reactor);
}

void Test::Stub::experimental_async::SetStringLength(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::test::LengthReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetStringLength_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::test::LengthReply>* Test::Stub::AsyncSetStringLengthRaw(::grpc::ClientContext* context, const ::test::LengthRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::test::LengthReply>::Create(channel_.get(), cq, rpcmethod_SetStringLength_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::test::LengthReply>* Test::Stub::PrepareAsyncSetStringLengthRaw(::grpc::ClientContext* context, const ::test::LengthRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::test::LengthReply>::Create(channel_.get(), cq, rpcmethod_SetStringLength_, context, request, false);
}

::grpc::Status Test::Stub::Seek(::grpc::ClientContext* context, const ::test::SeekRequest& request, ::test::SeekReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Seek_, context, request, response);
}

void Test::Stub::experimental_async::Seek(::grpc::ClientContext* context, const ::test::SeekRequest* request, ::test::SeekReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Seek_, context, request, response, std::move(f));
}

void Test::Stub::experimental_async::Seek(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::test::SeekReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Seek_, context, request, response, std::move(f));
}

void Test::Stub::experimental_async::Seek(::grpc::ClientContext* context, const ::test::SeekRequest* request, ::test::SeekReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Seek_, context, request, response, reactor);
}

void Test::Stub::experimental_async::Seek(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::test::SeekReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Seek_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::test::SeekReply>* Test::Stub::AsyncSeekRaw(::grpc::ClientContext* context, const ::test::SeekRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::test::SeekReply>::Create(channel_.get(), cq, rpcmethod_Seek_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::test::SeekReply>* Test::Stub::PrepareAsyncSeekRaw(::grpc::ClientContext* context, const ::test::SeekRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::test::SeekReply>::Create(channel_.get(), cq, rpcmethod_Seek_, context, request, false);
}

::grpc::Status Test::Stub::Write(::grpc::ClientContext* context, const ::test::WriteRequest& request, ::test::WriteReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Write_, context, request, response);
}

void Test::Stub::experimental_async::Write(::grpc::ClientContext* context, const ::test::WriteRequest* request, ::test::WriteReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Write_, context, request, response, std::move(f));
}

void Test::Stub::experimental_async::Write(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::test::WriteReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Write_, context, request, response, std::move(f));
}

void Test::Stub::experimental_async::Write(::grpc::ClientContext* context, const ::test::WriteRequest* request, ::test::WriteReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Write_, context, request, response, reactor);
}

void Test::Stub::experimental_async::Write(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::test::WriteReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Write_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::test::WriteReply>* Test::Stub::AsyncWriteRaw(::grpc::ClientContext* context, const ::test::WriteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::test::WriteReply>::Create(channel_.get(), cq, rpcmethod_Write_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::test::WriteReply>* Test::Stub::PrepareAsyncWriteRaw(::grpc::ClientContext* context, const ::test::WriteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::test::WriteReply>::Create(channel_.get(), cq, rpcmethod_Write_, context, request, false);
}

::grpc::Status Test::Stub::Read(::grpc::ClientContext* context, const ::test::ReadRequest& request, ::test::ReadReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Read_, context, request, response);
}

void Test::Stub::experimental_async::Read(::grpc::ClientContext* context, const ::test::ReadRequest* request, ::test::ReadReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Read_, context, request, response, std::move(f));
}

void Test::Stub::experimental_async::Read(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::test::ReadReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Read_, context, request, response, std::move(f));
}

void Test::Stub::experimental_async::Read(::grpc::ClientContext* context, const ::test::ReadRequest* request, ::test::ReadReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Read_, context, request, response, reactor);
}

void Test::Stub::experimental_async::Read(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::test::ReadReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Read_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::test::ReadReply>* Test::Stub::AsyncReadRaw(::grpc::ClientContext* context, const ::test::ReadRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::test::ReadReply>::Create(channel_.get(), cq, rpcmethod_Read_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::test::ReadReply>* Test::Stub::PrepareAsyncReadRaw(::grpc::ClientContext* context, const ::test::ReadRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::test::ReadReply>::Create(channel_.get(), cq, rpcmethod_Read_, context, request, false);
}

Test::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Test_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Test::Service, ::test::LengthRequest, ::test::LengthReply>(
          std::mem_fn(&Test::Service::SetStringLength), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Test_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Test::Service, ::test::SeekRequest, ::test::SeekReply>(
          std::mem_fn(&Test::Service::Seek), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Test_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Test::Service, ::test::WriteRequest, ::test::WriteReply>(
          std::mem_fn(&Test::Service::Write), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Test_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Test::Service, ::test::ReadRequest, ::test::ReadReply>(
          std::mem_fn(&Test::Service::Read), this)));
}

Test::Service::~Service() {
}

::grpc::Status Test::Service::SetStringLength(::grpc::ServerContext* context, const ::test::LengthRequest* request, ::test::LengthReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Test::Service::Seek(::grpc::ServerContext* context, const ::test::SeekRequest* request, ::test::SeekReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Test::Service::Write(::grpc::ServerContext* context, const ::test::WriteRequest* request, ::test::WriteReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Test::Service::Read(::grpc::ServerContext* context, const ::test::ReadRequest* request, ::test::ReadReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace test

