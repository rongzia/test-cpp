// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_test_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_test_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_test_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_test_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_test_2eproto;
namespace test {
class OpenReply;
class OpenReplyDefaultTypeInternal;
extern OpenReplyDefaultTypeInternal _OpenReply_default_instance_;
class OpenSend;
class OpenSendDefaultTypeInternal;
extern OpenSendDefaultTypeInternal _OpenSend_default_instance_;
}  // namespace test
PROTOBUF_NAMESPACE_OPEN
template<> ::test::OpenReply* Arena::CreateMaybeMessage<::test::OpenReply>(Arena*);
template<> ::test::OpenSend* Arena::CreateMaybeMessage<::test::OpenSend>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace test {

// ===================================================================

class OpenSend :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test.OpenSend) */ {
 public:
  OpenSend();
  virtual ~OpenSend();

  OpenSend(const OpenSend& from);
  OpenSend(OpenSend&& from) noexcept
    : OpenSend() {
    *this = ::std::move(from);
  }

  inline OpenSend& operator=(const OpenSend& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpenSend& operator=(OpenSend&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OpenSend& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OpenSend* internal_default_instance() {
    return reinterpret_cast<const OpenSend*>(
               &_OpenSend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(OpenSend* other);
  friend void swap(OpenSend& a, OpenSend& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OpenSend* New() const final {
    return CreateMaybeMessage<OpenSend>(nullptr);
  }

  OpenSend* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OpenSend>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OpenSend& from);
  void MergeFrom(const OpenSend& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpenSend* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test.OpenSend";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_test_2eproto);
    return ::descriptor_table_test_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes inarg = 1;
  void clear_inarg();
  static const int kInargFieldNumber = 1;
  const std::string& inarg() const;
  void set_inarg(const std::string& value);
  void set_inarg(std::string&& value);
  void set_inarg(const char* value);
  void set_inarg(const void* value, size_t size);
  std::string* mutable_inarg();
  std::string* release_inarg();
  void set_allocated_inarg(std::string* inarg);

  // uint32 outlen = 2;
  void clear_outlen();
  static const int kOutlenFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 outlen() const;
  void set_outlen(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:test.OpenSend)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr inarg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 outlen_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class OpenReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test.OpenReply) */ {
 public:
  OpenReply();
  virtual ~OpenReply();

  OpenReply(const OpenReply& from);
  OpenReply(OpenReply&& from) noexcept
    : OpenReply() {
    *this = ::std::move(from);
  }

  inline OpenReply& operator=(const OpenReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpenReply& operator=(OpenReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OpenReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OpenReply* internal_default_instance() {
    return reinterpret_cast<const OpenReply*>(
               &_OpenReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(OpenReply* other);
  friend void swap(OpenReply& a, OpenReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OpenReply* New() const final {
    return CreateMaybeMessage<OpenReply>(nullptr);
  }

  OpenReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OpenReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OpenReply& from);
  void MergeFrom(const OpenReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpenReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test.OpenReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_test_2eproto);
    return ::descriptor_table_test_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes outarg = 1;
  void clear_outarg();
  static const int kOutargFieldNumber = 1;
  const std::string& outarg() const;
  void set_outarg(const std::string& value);
  void set_outarg(std::string&& value);
  void set_outarg(const char* value);
  void set_outarg(const void* value, size_t size);
  std::string* mutable_outarg();
  std::string* release_outarg();
  void set_allocated_outarg(std::string* outarg);

  // @@protoc_insertion_point(class_scope:test.OpenReply)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr outarg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OpenSend

// bytes inarg = 1;
inline void OpenSend::clear_inarg() {
  inarg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& OpenSend::inarg() const {
  // @@protoc_insertion_point(field_get:test.OpenSend.inarg)
  return inarg_.GetNoArena();
}
inline void OpenSend::set_inarg(const std::string& value) {
  
  inarg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:test.OpenSend.inarg)
}
inline void OpenSend::set_inarg(std::string&& value) {
  
  inarg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:test.OpenSend.inarg)
}
inline void OpenSend::set_inarg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  inarg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:test.OpenSend.inarg)
}
inline void OpenSend::set_inarg(const void* value, size_t size) {
  
  inarg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:test.OpenSend.inarg)
}
inline std::string* OpenSend::mutable_inarg() {
  
  // @@protoc_insertion_point(field_mutable:test.OpenSend.inarg)
  return inarg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* OpenSend::release_inarg() {
  // @@protoc_insertion_point(field_release:test.OpenSend.inarg)
  
  return inarg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void OpenSend::set_allocated_inarg(std::string* inarg) {
  if (inarg != nullptr) {
    
  } else {
    
  }
  inarg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), inarg);
  // @@protoc_insertion_point(field_set_allocated:test.OpenSend.inarg)
}

// uint32 outlen = 2;
inline void OpenSend::clear_outlen() {
  outlen_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OpenSend::outlen() const {
  // @@protoc_insertion_point(field_get:test.OpenSend.outlen)
  return outlen_;
}
inline void OpenSend::set_outlen(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  outlen_ = value;
  // @@protoc_insertion_point(field_set:test.OpenSend.outlen)
}

// -------------------------------------------------------------------

// OpenReply

// bytes outarg = 1;
inline void OpenReply::clear_outarg() {
  outarg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& OpenReply::outarg() const {
  // @@protoc_insertion_point(field_get:test.OpenReply.outarg)
  return outarg_.GetNoArena();
}
inline void OpenReply::set_outarg(const std::string& value) {
  
  outarg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:test.OpenReply.outarg)
}
inline void OpenReply::set_outarg(std::string&& value) {
  
  outarg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:test.OpenReply.outarg)
}
inline void OpenReply::set_outarg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  outarg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:test.OpenReply.outarg)
}
inline void OpenReply::set_outarg(const void* value, size_t size) {
  
  outarg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:test.OpenReply.outarg)
}
inline std::string* OpenReply::mutable_outarg() {
  
  // @@protoc_insertion_point(field_mutable:test.OpenReply.outarg)
  return outarg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* OpenReply::release_outarg() {
  // @@protoc_insertion_point(field_release:test.OpenReply.outarg)
  
  return outarg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void OpenReply::set_allocated_outarg(std::string* outarg) {
  if (outarg != nullptr) {
    
  } else {
    
  }
  outarg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), outarg);
  // @@protoc_insertion_point(field_set_allocated:test.OpenReply.outarg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace test

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_test_2eproto
